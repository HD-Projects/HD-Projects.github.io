.overlay {
    /* Height & width depends on how you want to reveal the overlay (see JS below) */
    height: 100%;
    width: 0;
    position: fixed; /* Stay in place */
    z-index: 1; /* Sit on top */
    left: 0;
    top: 0;
    background-color: rgb(0,0,0); /* Black fallback color */
    background-color: rgba(0,0,0, 0.9); /* Black w/opacity */
    overflow-x: hidden; /* Disable horizontal scroll */
    transition: 0.5s; /* 0.5 second transition effect to slide in or slide down the overlay (height or width, depending on reveal) */
}

table {
  border-collapse: collapse;
  border-spacing: 0;
  width: 100%;
  border: 1px solid #ddd;
}

th, td {
  text-align: center;
  padding: 16px;
}

th:first-child, td:first-child {
  text-align: left;
}

tr:nth-child(even) {
  background-color: #f2f2f2
}

.fa-check {
  color: green;
}

.fa-remove {
  color: red;
} 

/* Position the content inside the overlay */
.overlay-content {
    position: relative;
    top: 10%; /* 25% from the top */
    width: 100%; /* 100% width */
    text-align: center; /* Centered text/links */
    margin-top: 30px; /* 30px top margin to avoid conflict with the close button on smaller screens */
}

/* The navigation links inside the overlay */
.overlay a {
    padding: 8px;
    text-decoration: none;
    font-size: 36px;
    color: #818181;
    display: block; /* Display block instead of inline */
    transition: 0.3s; /* Transition effects on hover (color) */
}

    /* When you mouse over the navigation links, change their color */
    .overlay a:hover, .overlay a:focus {
        color: #f1f1f1;
    }

/* Position the close button (top right corner) */
.overlay .closebtn {
    position: absolute;
    top: 20px;
    right: 45px;
    font-size: 60px;
}

/* When the height of the screen is less than 450 pixels, change the font-size of the links and position the close button again, so they don't overlap */
@media screen and (max-height: 450px) {
    .overlay a {
        font-size: 20px
    }

    .overlay .closebtn {
        font-size: 40px;
        top: 15px;
        right: 35px;
    }
}

.parallax {
  /* The image used */
  background-image: url("https://images.pexels.com/photos/270366/pexels-photo-270366.jpeg?cs=srgb&dl=codes-coding-programming-270366.jpg&fm=jpg");

  /* Set a specific height */
  min-height: 80%; 
  /* Create the parallax scrolling effect */
  background-attachment: fixed;
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
}

.caption {
  position: absolute;
  left: 0;
  top: 50%;
  width: 100%;
  text-align: center;
  color: #000;
}

.caption span.border {
  background-color: #111;
  color: #fff;
  padding: 18px;
  font-size: 25px;
  letter-spacing: 5px;
}

.main img{
  padding: 2% 2%;
  border-radius: 0%;
  width: 100%;
}

.footer {
  overflow: hidden;
  background-color: #333;
  font-family: Arial;
  width: 100%;
}

.footer a {
  float: left;
  font-size: 14px;
  color: white;
  text-align: center;
  padding: 14px 16px;
  text-decoration: none;
}

.footer a:hover {
  float: left;
  font-size: 14px;
  color: rgb(43, 43, 43);
  text-align: center;
  text-decoration: none;
  cursor: default;
  background-color: #ffffff;
}

.bullet{
  text-align: left;
  padding: 10%;
}

.links a{
  text-decoration: none;
  cursor: default;
}

.links a:visited{
  text-decoration: none;
  cursor: default;
}

ul {
  text-align: left;
}

.no-script {
  font-size:  200%;
}

.full-width {
  width: 90%;
}

img {
  text-align: center;
}

body, html {
    height: 100%;
    margin: 0;
    font: 400 15px/1.8 "Lato", sans-serif;
    color: #777;
    line-height: 1.8;
}

::-webkit-scrollbar {
    width: 10px;
}

/* Track */
::-webkit-scrollbar-track {
    background: #f1f1f1;
}

/* Handle */
::-webkit-scrollbar-thumb {
    background: #888;
}

    /* Handle on hover */
    ::-webkit-scrollbar-thumb:hover {
        background: #555;
    }

.statArea {
    background-color: grey;
    height: 150px;
}

* {
    box-sizing: border-box;
}

body {
    margin: 0;
    font-family: Arial, Helvetica, sans-serif;
}

.container {
    padding: 32px;
}

.row:after {
    content: "";
    display: table;
    clear: both
}

.column-66 {
    float: left;
    width: 66.66666%;
    padding: 20px;
}

.column-33 {
    float: left;
    width: 33.33333%;
    padding: 20px;
}

.large-font {
    font-size: 48px;
}

.xlarge-font {
    font-size: 64px
}

.button {
    border: none;
    color: white;
    padding: 14px 28px;
    font-size: 16px;
    cursor: pointer;
    background-color: #4CAF50;
}

img {
    display: block;
    height: auto;
    max-width: 100%;
}

@media screen and (max-width: 1000px) {
    .column-66,
    .column-33 {
        width: 100%;
        text-align: center;
    }

    img {
        margin: auto;
    }
}


.box div {
    text-align: center;
    display: inline-block;
    padding: 15px;
    margin: 35px;
    width: 250px;
    text-align: center;
    color: #000000;
    font-family: arial, sans-serif;
}

.green {
    background-color: gray;
}

.blue {
    background-color: gray;
}

.gray {
    background-color: gray;
}

.col-container {
    display: table;
    width: 100%;
}

.col {
    display: table-cell;
    padding: 16px;
}

.chart {

text-align: center;

}

table {
  border-collapse: collapse;
  border-spacing: 0;
  width: 100%;
  border: 1px solid #ddd;
}

th, td {
  text-align: center;
  padding: 16px;
}

th:first-child, td:first-child {
  text-align: left;
}

tr:nth-child(even) {
  background-color: #f2f2f2
}

.fa-check {
  color: green;
}

.fa-remove {
  color: red;
}

* {
  box-sizing: border-box;
}

.columns {
  float: left;
  width: 33.3%;
  padding: 8px;
}

.price {
  list-style-type: none;
  border: 1px solid #eee;
  margin: 0;
  padding: 0;
  -webkit-transition: 0.3s;
  transition: 0.3s;
}

.price:hover {
  box-shadow: 0 8px 12px 0 rgba(0,0,0,0.2)
}

.price .header {
  background-color: #111;
  color: white;
  font-size: 25px;
}

.price li {
  border-bottom: 1px solid #eee;
  padding: 20px;
  text-align: center;
}

.price .grey {
  background-color: #eee;
  font-size: 20px;
}

.button {
  background-color: #4CAF50;
  border: none;
  color: white;
  padding: 10px 25px;
  text-align: center;
  text-decoration: none;
  font-size: 18px;
}

@media only screen and (max-width: 600px) {
  .columns {
    width: 100%;
  }
}

body {
  font-family: Arial;
  color: black;
}

.split {
  height: 100%;
  width: 50%;
  position: fixed;
  z-index: 1;
  top: 0;
  overflow-x: hidden;
  padding-top: 20px;
}

.left {
  left: 0;
  background-color: #111;
}

.right {
  right: 0;
  background-color: black;
}

.centered {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
}

.centered img {
  width: 150px;
  border-radius: 50%;
}
body {
  font-family: Arial, Helvetica, sans-serif;
}

.flip-card {
  background-color: transparent;
  width: 300px;
  height: 300px;
  perspective: 1000px;
}

.flip-card-inner {
  position: relative;
  width: 100%;
  height: 100%;
  text-align: center;
  transition: transform 0.6s;
  transform-style: preserve-3d;
  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
}

.flip-card:hover .flip-card-inner {
  transform: rotateY(180deg);
}

.flip-card-front, .flip-card-back {
  position: absolute;
  width: 100%;
  height: 100%;
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
}

.flip-card-front {
  background-color: #bbb;
  color: black;
}

.flip-card-back {
  background-color: #2980b9;
  color: white;
  transform: rotateY(180deg);
}
button {
text-align: center;
font-size: 30px


}

.smartphone {
  position: relative;
  width: 360px;
  height: 640px;
  margin: auto;
  border: 16px black solid;
  border-top-width: 60px;
  border-bottom-width: 60px;
  border-radius: 36px;

}

/* The horizontal line on the top of the device */
.smartphone:before {
  content: '';
  display: block;
  width: 60px;
  height: 5px;
  position: absolute;
  top: -30px;
  left: 50%;
  transform: translate(-50%, -50%);
  background: #333;
  border-radius: 10px;
}

/* The circle on the bottom of the device */
.smartphone:after {
  content: '';
  display: block;
  width: 35px;
  height: 35px;
  position: absolute;
  left: 50%;
  bottom: -65px;
  transform: translate(-50%, -50%);
  background: #333;
  border-radius: 50%;

}

/* The screen (or content) of the device */
.smartphone .content {
  width: 360px;
  height: 400px;
  background: white;
}

#donationLink {

color: blue;

}











/*
 * CSS Fadeshow by @alexerlandsson
 * This is a fadeshow built in CSS and with customization in focus.
 * Supports quick navigation, prev/next navigation and autoplay.
 * 
 * For better documentation and implementation guide, check out the GitHub repository:
 * https://github.com/alexerlandsson/css-fadeshow
*/


/*
 * ===== VARIABLES =====
 *
 * Change these variables to match your preferences. For a more detailed
 * description of what each variable do, visit https://github.com/alexerlandsson/css-fadeshow
 */

$max-slides:					5;
$prefix:							true;
$responsive:					true;
$breakpoint-small:			500px;
$fade-time:						1;
$prev-next-fontfamily:		sans-serif;
$prev-next-icon-size:		3vw;
$prev-next-icon-color:		rgba(255,255,255,0.5);
$prev-next-bg:					rgba(255,255,255,0);
$prev-next-bg-hover:			rgba(255,255,255,0.1);
$prev-icon:						'❮';
$next-icon:						'❯';
$autohide-next-prev:			true;
$quick-nav-color:				rgba(255,255,255,0.8);
$quick-nav-active-color:	coral;
$fade-color:					#fff;
$autoplay:						true;
$autoplay-duration:			5;


/*
 * ===== MIXINS =====
 *
 * This section contains mixin used
 * Do not change anything here unless you know what you are doing.
 */

/* Mixins to handle prefixes */

@mixin fadeshow-transition($value...) {
	@if length($value) < 1 {
		$value: all 150ms linear;
	}
	@if $prefix == true {
		-webkit-transition: $value;
	}
				  transition: $value;
}

@mixin fadeshow-transform($value...) {
	@if length($value) < 1 {
		$value: all 150ms linear;
	}
	@if $prefix == true {
		-webkit-transform: $value;
			 -ms-transform: $value;
	}
				  transform: $value;
}

@mixin fadeshow-animation($value...) {
	@if $prefix == true {
		-webkit-animation: $value;
	}
				  animation: $value;
}

@mixin fadeshow-animation-delay($value) {
	@if $prefix == true {
		-webkit-animation-delay: $value;
	}
				  animation-delay: $value;
}

@mixin fadeshow-unselectable() {
	@if $prefix == true {
		-webkit-user-select: none;
		   -moz-user-select: none;
			 -ms-user-select: none;
	}
				  user-select: none;
}

/* Mixins to handle Quick Navigation Button states */

@mixin quickNavBtnActive() {
	background-color: $quick-nav-active-color;
}

@mixin quickNavBtnInactive() {
	background-color: $quick-nav-color;
}


/*
 * ===== FADESHOW =====
 *
 * Base functionality for the fadeshow.
 * Do not change anything here unless you know what you are doing.
 */

[data-am-fadeshow] {
	position: relative;
	width: 100%;
	height: 100%;
	overflow: hidden;
	background-color: $fade-color;

	/* Slides */
	.fs-slide {
		position: absolute;
		top: 0;
		bottom: 0;
		left: 0;
		right: 0;
		opacity: 0;
		background-size: cover;
		background-position: center;
		background-repeat: no-repeat;
		@include fadeshow-transition(opacity #{$fade-time}s ease);

		/* Display first child on load */
		&:first-child {
			opacity: 1;
		}
	}

	/* Quick Navigation */
	.fs-quick-nav {
		position: absolute;
		bottom: 15px;
		left: 50%;
		z-index: 1;
		@include fadeshow-unselectable();
		@include fadeshow-transform(translateX(-50%));
	}

	.fs-quick-btn {
		display: inline-block;
		width: 15px;
		height: 15px;
		margin: 0 2px;
		border-radius: 50%;
		cursor: pointer;
		@include fadeshow-transition(opacity 200ms ease);
		@include quickNavBtnInactive();

		&:hover {
			opacity: 0.8;
		}

		/* Set active state to first button on load */
		&:first-child {
			@include quickNavBtnActive();
		}
	}

	/* Prev/Next Navigation */
	%prev-next {
		position: absolute;
		display: none;
		top: 0;
		bottom: 0;
		width: 100px;
		cursor: pointer;
		font-family: $prev-next-fontfamily;
		background-color: $prev-next-bg;
		-webkit-tap-highlight-color: rgba(0,0,0,0);
		@include fadeshow-transition(all 200ms ease);

		@if $responsive == true {
			@media (max-width: $breakpoint-small) {
				width: 50%;
			}
		}

		&:before {
			position: absolute;
			top: 50%;
			font-size: $prev-next-icon-size;
			color: $prev-next-icon-color;
		}

		&:hover {
			background-color: $prev-next-bg-hover;
			@if $responsive == true {
				@media (max-width: $breakpoint-small) {
					background-color: rgba(255,255,255,0);
				}
			}
		}
	}

	.fs-prev-btn {
		@extend %prev-next;
		left: 0;

		&:before {
			content: "#{$prev-icon}";
			left: 50%;
			@include fadeshow-transform(translate(-50%, -50%));
			@if $responsive == true {
				@media (max-width: $breakpoint-small) {
					left: 30px;
				}
			}
		}

		@if $autohide-next-prev == true {
			@include fadeshow-transform(translateX(-100%));
			@if $responsive == true {
				@media (max-width: $breakpoint-small) {
					@include fadeshow-transform(translate(0));
				}
			}
		}
	}

	.fs-next-btn {
		@extend %prev-next;
		right: 0;

		&:before {
			content: "#{$next-icon}";
			right: 50%;
			@include fadeshow-transform(translate(50%, -50%));
			@if $responsive == true {
				@media (max-width: $breakpoint-small) {
					right: 30px;
				}
			}
		}

		@if $autohide-next-prev == true {
			@include fadeshow-transform(translateX(100%));
			@if $responsive == true {
				@media (max-width: $breakpoint-small) {
					@include fadeshow-transform(translate(0));
				}
			}
		}
	}

	/* Base functionality */
	input[type="radio"] {
		position: fixed;
		top: -9999px;

		&:checked {

			/* This loop handles the slide switching and quick navigation active state */
			$i: $max-slides;

			@while $i > 0 {

				&:nth-of-type(#{$i}) {
					/* Show slide */
					~ .fs-slides {
						.fs-slide {
							//Cancel autoplay
							opacity: 0;
							@include fadeshow-animation(none !important);
						}
						.fs-slide:nth-child(#{$i}) {
							opacity: 1;
						}
					}

					/* Add active state to dot */
					~ .fs-quick-nav {
						.fs-quick-btn {
							@include quickNavBtnInactive();
							/* Cancel autoplay */
							@include fadeshow-animation(none !important);
						}
						.fs-quick-btn:nth-child(#{$i}) {
							background-color: $quick-nav-active-color;
							&:hover {
								opacity: 1;
							}
						}
					}

				}
				$i: $i - 1;
			}

			/* Hide navigation if only one slide */
			&:first-of-type:last-of-type {
				~ .fs-quick-nav,
				~ .fs-prev-nav,
				~ .fs-next-nav {
					display: none !important;
				}
			}

		}
	}

	/* Autohide Prev/Next Navigation */
	@if $autohide-next-prev == true {
		&:hover {
			.fs-prev-btn,
			.fs-next-btn {
				@include fadeshow-transform(translateX(0));
			}
		}
	}

}


/*
 * ===== PREV/NEXT NAVIGATION =====
 *
 * This section handles the prev/next navigation.
 */

/* Handle Prev/Next buttons */
[data-am-fadeshow~="next-prev-navigation"] {
	input[type="radio"] {

		&:checked {

			$i: $max-slides;

			@while $i > 0 {

				&:nth-of-type(#{$i}) {

					$prev: ($i - 1);
					$next: ($i + 1);

					/* Show previous button */
					@if $prev > 0 {
						~ .fs-prev-nav {
							.fs-prev-btn {
								display: none;
							}
							.fs-prev-btn:nth-child(#{$prev}) {
								display: block;
							}
						}
					}

					/* Show next button */
					@if $next < ($max-slides + 1) {
						~ .fs-next-nav {
							.fs-next-btn {
								display: none;
							}
							.fs-next-btn:nth-child(#{$next}) {
								display: block;
							}
						}
					}

					/* Show last prev button if first slide */
					&:first-of-type {
						~ .fs-prev-nav {
							.fs-prev-btn:last-child {
								display: block;
							}
						}
					}

					/* Show first next button if last slide */
					&:last-of-type {
						~ .fs-next-nav {
							.fs-next-btn:first-child {
								display: block;
							}
						}
					}

				}
			  $i: $i - 1;
			}
		}
	}

	/* Display first pair of Prev/Next Buttons on load */
	.fs-prev-btn:last-child {
		display: block;
	}

	.fs-next-btn:nth-child(2) {
		display: block
	}

}


/*
 * ===== AUTOPLAY =====
 *
 * Functions to handle autoplay.
 * If you're not going to use autoplay, set $autoplay to false.
 * This part tends to compile into a lot of uneccesary CSS otherwise.
 */

@if $autoplay == true {

	$i: $max-slides;

	@while $i > 1 {

		$total-duration: $autoplay-duration * $i;

		@keyframes quickNavAnimation-#{$i} {
			0% { @include quickNavBtnInactive();  }
			#{100% * $fade-time / $total-duration},
			#{100% * $autoplay-duration / $total-duration} { @include quickNavBtnActive(); }
			#{100% * ($autoplay-duration + $fade-time) / $total-duration},
			100% { @include quickNavBtnInactive(); }
		}
		@if $prefix == true {
			@-webkit-keyframes quickNavAnimation-#{$i} {
				0% { @include quickNavBtnInactive();  }
				#{100% * $fade-time / $total-duration},
				#{100% * $autoplay-duration / $total-duration} { @include quickNavBtnActive(); }
				#{100% * ($autoplay-duration + $fade-time) / $total-duration},
				100% { @include quickNavBtnInactive(); }
			}
		}

		@keyframes slidesAnimation-#{$i} {
			0% { opacity: 0; }
			#{100% * $fade-time / $total-duration},
			#{100% * $autoplay-duration / $total-duration} { opacity: 1; }
			#{100% * ($autoplay-duration + $fade-time) / $total-duration},
			100% { opacity: 0; }
		}
		@if $prefix == true {
			@-webkit-keyframes slidesAnimation-#{$i} {
				0% { opacity: 0; }
				#{100% * $fade-time / $total-duration},
				#{100% * $autoplay-duration / $total-duration} { opacity: 1; }
				#{100% * ($autoplay-duration + $fade-time) / $total-duration},
				100% { opacity: 0; }
			}
		}

		[data-am-fadeshow~="autoplay"] {
			input[type="radio"]:nth-of-type(#{$i}):last-of-type {

				/* Slide animation */
				~ .fs-slides {
					.fs-slide {
						@include fadeshow-animation(slidesAnimation-#{$i} #{$total-duration}s infinite);
					}
				}

				/* Quick navigation animation */
				~ .fs-quick-nav {
					.fs-quick-btn {
						@include fadeshow-animation(quickNavAnimation-#{$i} #{$total-duration}s infinite);
					}
				}

				/* Animation Delay */
				@for $j from 1 through $i {
					~ .fs-slides .fs-slide:nth-child(#{$j}),
					~ .fs-quick-nav .fs-quick-btn:nth-child(#{$j}) {
						$animation-delay: #{($j - 1) * ($autoplay-duration) - $fade-time}s;
						@include fadeshow-animation-delay(#{$animation-delay});
					}
				}

			}
			$i: $i - 1;
		}
	}
}

/* Base Styling */

body {
	margin: 0;
}

.container {
	position: absolute;
	top: 0;
	bottom: 0;
	left: 0;
	right: 0;
	box-shadow: 0 0 20px rgba(0,0,0,0.1);
	overflow: hidden;
}